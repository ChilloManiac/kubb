/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable unused-imports/no-unused-vars */
/* eslint-disable @typescript-eslint/ban-types */
import type { HasErrors, Head, Head2, TailBy } from './utils.ts'
import type { IsToken, ASTs, ASTTypes, SelectToken } from './AST.ts'
import type { Tokenize } from './tokenizer.ts'
import type { Engine } from './index.ts'
import type { Debug } from '@kubb/core'

export type ParseTypes = {
  Identifier: 'Identifier'
}

export type Parsers = { type?: keyof ParseTypes; [x: string]: any }

type ParseIdentifier<Tokens extends ASTs[], Res extends Parsers, LookBack extends ASTs, Cursor extends ASTs, LookAhead extends ASTs> = LookBack extends {
  type: ASTTypes['LINEBREAK']
}
  ? // Tag:
    Debug<
      {
        type: 'IdentifierRoot'
        debug: {
          CurrCursor: Cursor
          CurrTokens: Tokens
          PrevToken: LookBack
          NextToken: LookAhead
        }
        value: Res
        children: ParserInternal<Tokens> extends { type: 'Identifier'; value: string; children: ASTs }
          ? {
              value: ParserInternal<Tokens>['value']
              children: ParserInternal<Tokens>['children']['name']
            }
          : // loop back to  type: 'Identifier'
            ParserInternal<Tokens>
      },
      Engine['debug']['parser']
    >
  : // type: object
    [
      Debug<
        {
          type: 'Identifier'
          debug: {
            CurrCursor: Cursor
            CurrTokens: Tokens
            PrevToken: LookBack
            NextToken: LookAhead
            // LineBreak<1> and Indent<2>
            NextIndentLevel: HasErrors<SelectToken<Tokens[1], 'LINEBREAK'> | SelectToken<Tokens[2], 'INDENT'>> extends true
              ? undefined
              : Extract<SelectToken<Tokens[2], 'INDENT'>, { level: number }>['level']
          }
          value: Res['value']
          children: LookAhead extends { type: ASTTypes['IDENT'] } ? LookAhead['name'] : Cursor['name']
        },
        Engine['debug']['parser']
      >,
    ]

/**
 * Tokens: ASTs that are generated by TokenizeInternal
 * Acc: NOT NEEDED
 * Cursor: Current AST Token
 * Res: object created out of the parsers(JSON format)
 */
type ParserInternal<
  Tokens extends ASTs[],
  Res extends Parsers = {},
  LookBack extends ASTs = never,
  Cursor extends ASTs = Head<Tokens>,
  LookAhead extends ASTs = Head2<Tokens>,
> = IsToken<Cursor, 'LINEBREAK' | 'COLLON'> extends true // skip linebreak and collon
  ? ParserInternal<TailBy<Tokens, 1>, Res, Head<Tokens>>
  : IsToken<Cursor, 'IDENT'> extends true
  ? // keep data to reuse later on when checking on Res, we need the correct name here
    ParserInternal<TailBy<Tokens, 1>, Res & { type: 'Identifier'; value: Cursor['name'] }, Head<TailBy<Tokens, 1>>>
  : LookAhead extends {
      type: ASTTypes['IDENT']
    }
  ? // TODO split tokens per LINEBREAK/INDENT to create a children array with only those needed and push the rest back to the main parser
    // adding more data to Res based on previous check(see type Identifier)
    Res extends {
      type: ParseTypes['Identifier']
    }
    ? ParseIdentifier<TailBy<Tokens, 1>, Res, LookBack, Head<TailBy<Tokens, 1>>, Head2<TailBy<Tokens, 1>>>
    : never
  : Res

//ParserError<`Expected token of type IDENT, got ${LookAhead['type']}`>
export type Parser<Tokens extends ASTs[]> = ParserInternal<Tokens>

type Schema1 = `
Pet:
  description: test
  required: true
`

type Schema2 = `
Pet:
  type: object
  description: test
  required: true
Tag:
  type: object
  properties:
    id:
      type: integer
      format: int64
    name:
      type: string
`
type Token1 = Tokenize<Schema1>
//    ^?
// [Identifier<"Pet">, Collon, LineBreak<1>, Indent<2>, Identifier<"description">, Collon, Indent<1>, Identifier<"test">, LineBreak<1>, Indent<2>, Identifier<"required">, Collon, Indent<1>, Identifier<"true">]
type Demo1 = Parser<Token1>
//    ^?

type Demo2 = Parser<Tokenize<Schema2>>
//    ^?
