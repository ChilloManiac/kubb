/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import { addPetHandler } from './addPet.js'
import { createUserHandler } from './createUser.js'
import { createUsersWithListInputHandler } from './createUsersWithListInput.js'
import { placeOrderHandler } from './placeOrder.js'
import { placeOrderPatchHandler } from './placeOrderPatch.js'
import { updatePetHandler } from './updatePet.js'
import { updateUserHandler } from './updateUser.js'
import { addPetMutationRequestSchema } from '../zod/addPetSchema.js'
import { createUserMutationRequestSchema } from '../zod/createUserSchema.js'
import { createUsersWithListInputMutationRequestSchema } from '../zod/createUsersWithListInputSchema.js'
import { placeOrderPatchMutationRequestSchema } from '../zod/placeOrderPatchSchema.js'
import { placeOrderMutationRequestSchema } from '../zod/placeOrderSchema.js'
import { updatePetMutationRequestSchema } from '../zod/updatePetSchema.js'
import { updateUserMutationRequestSchema } from '../zod/updateUserSchema.js'
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp'
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio'

export const server = new McpServer({
  name: 'Swagger Petstore - OpenAPI 3.0',
  version: '3.0.3',
})

server.tool('updatePet', 'Update an existing pet by Id', { data: updatePetMutationRequestSchema }, async ({ data }) => {
  return updatePetHandler({ data })
})

server.tool('addPet', 'Add a new pet to the store', { data: addPetMutationRequestSchema }, async ({ data }) => {
  return addPetHandler({ data })
})

server.tool('placeOrder', 'Place a new order in the store', { data: placeOrderMutationRequestSchema }, async ({ data }) => {
  return placeOrderHandler({ data })
})

server.tool('placeOrderPatch', 'Place a new order in the store with patch', { data: placeOrderPatchMutationRequestSchema }, async ({ data }) => {
  return placeOrderPatchHandler({ data })
})

server.tool('createUser', 'This can only be done by the logged in user.', { data: createUserMutationRequestSchema }, async ({ data }) => {
  return createUserHandler({ data })
})

server.tool(
  'createUsersWithListInput',
  'Creates list of users with given input array',
  { data: createUsersWithListInputMutationRequestSchema },
  async ({ data }) => {
    return createUsersWithListInputHandler({ data })
  },
)

server.tool('updateUser', 'This can only be done by the logged in user.', { username, data: updateUserMutationRequestSchema }, async ({ username, data }) => {
  return updateUserHandler({ username, data })
})

async function startServer() {
  try {
    const transport = new StdioServerTransport()
    await server.connect(transport)
    console.error('Server started and listening on stdio')
  } catch (error) {
    console.error('Failed to start server:', error)
    process.exit(1)
  }
}
